# Step 1: Install Required Libraries
!pip install -q scikit-learn pandas matplotlib seaborn

# Step 2: Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.impute import SimpleImputer
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import GridSearchCV
from scipy.stats import zscore  # For outlier detection

# Step 3: Load Data
df = pd.read_csv("/content/drive/MyDrive/global_traffic_accidents.csv")

# Step 4: Data Cleaning

# New: Remove duplicate rows
df = df.drop_duplicates()

# Handle missing values
df['Vehicles Involved'] = df['Vehicles Involved'].fillna(df['Vehicles Involved'].mean())  # Impute missing numerical values
df = df.dropna(subset=['Latitude', 'Longitude', 'Cause'])  # Drop rows with missing critical columns
df['Road Condition'] = df['Road Condition'].str.strip().str.lower()  # Clean and standardize text data

# New: Remove outliers based on Z-score for 'Vehicles Involved'
df = df[(np.abs(zscore(df[['Vehicles Involved']])) < 3).all(axis=1)]

# Step 5: Feature Engineering
df['DateTime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'])
df['Hour'] = df['DateTime'].dt.hour
df['DayOfWeek'] = df['DateTime'].dt.dayofweek

# Encode Categorical Features
le_weather = LabelEncoder()
le_road = LabelEncoder()
le_cause = LabelEncoder()

df['Weather Encoded'] = le_weather.fit_transform(df['Weather Condition'])
df['Road Encoded'] = le_road.fit_transform(df['Road Condition'])
df['Cause Encoded'] = le_cause.fit_transform(df['Cause'])

# Step 6: Feature Selection
features = ['Latitude', 'Longitude', 'Vehicles Involved', 'Hour', 'DayOfWeek', 'Weather Encoded', 'Road Encoded']
X = df[features]
y = df['Cause Encoded']

# Step 7: Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 8: Scaling Features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 9: Train Model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Step 10: Model Evaluation
y_pred = model.predict(X_test_scaled)
print("Classification Report:\n")
print(classification_report(y_test, y_pred, target_names=le_cause.classes_))

# Step 11: Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="YlGnBu", xticklabels=le_cause.classes_, yticklabels=le_cause.classes_)
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Step 12: Feature Importance
importances = model.feature_importances_
feature_names = X.columns
plt.figure(figsize=(8, 5))
sns.barplot(x=importances, y=feature_names)
plt.title("Feature Importances")
plt.show()

# Step 13: Risky Road Conditions (Most Frequent Road Conditions)
road_counts = df['Road Condition'].value_counts()
plt.figure(figsize=(10, 6))
bars = plt.bar(road_counts.index, road_counts.values, color='tomato')
plt.title('Number of Accidents by Road Condition')
plt.xlabel('Road Condition')
plt.ylabel('Number of Accidents')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval + 2, int(yval), ha='center', va='bottom')
plt.tight_layout()
plt.show()

# Step 14: Accident Causes Distribution (Pie Chart)
cause_counts = df['Cause'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(cause_counts, labels=cause_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Traffic Accident Causes')
plt.axis('equal')
plt.show()

# Step 15: Accident Hotspots (Top 10 Locations)
location_counts = df['Location'].value_counts().head(10)
plt.figure(figsize=(10, 6))
bars = plt.bar(location_counts.index, location_counts.values, color='skyblue')
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height + 1, str(height),
             ha='center', va='bottom', fontsize=10)
plt.title('Top 10 Locations with Highest Number of Accidents')
plt.xlabel('Location')
plt.ylabel('Number of Accidents')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()
